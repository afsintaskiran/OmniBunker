# Installation Guide / Kurulum KÄ±lavuzu - OmniBunker (v1.0.0)

## English Version

### Prerequisites

Ensure you have the following dependencies installed:

- **Docker & Docker Compose**
- **Python 3.10+ & Pip**
- **Node.js & npm**
- **Redis** (For Celery task queue)
- **PostgreSQL** (For database management)
- **VMware Workstation or ESXi** (For deploying via OVA image)

### Step 1: Clone the Repository

```bash
git clone https://github.com/your-repo/omnibunker.git
cd omnibunker
```

### Step 2: Backend Setup (FastAPI & Celery)

```bash
python3 -m venv env
source env/bin/activate  # Windows: env\Scripts\activate
pip install -r backend/requirements.txt
uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
```

### Step 3: Frontend Setup (React)

```bash
cd frontend
npm install
npm start
```

### Step 4: Redis & Celery Worker

```bash
redis-server
cd backend
celery -A tasks worker --loglevel=info
```

### Step 5: Deploy with Docker (Optional)

```bash
docker-compose up -d
```

### Step 6: Deploy as VMware OVA Image

1. Download the OmniBunker OVA image from your official repository.
2. Open **VMware Workstation** or **ESXi**.
3. Select **File > Import OVA**.
4. Choose the OmniBunker OVA file.
5. Start the virtual machine.
6. Access the application via:
   - **Frontend:** `http://vm-ip:3000`
   - **Backend API Docs:** `http://vm-ip:8000/docs`

### Step 7: CI/CD Pipeline Configuration (Optional)

1. **GitHub Actions CI/CD Pipeline Setup:**

   - Create a `.github/workflows/main.yml` file in the repository.
   - Add the following YAML configuration:
     ```yaml
     name: OmniBunker CI/CD

     on:
       push:
         branches:
           - main

     jobs:
       build:
         runs-on: ubuntu-latest
         steps:
           - name: Checkout repository
             uses: actions/checkout@v3

           - name: Set up Python
             uses: actions/setup-python@v4
             with:
               python-version: "3.10"

           - name: Install dependencies
             run: |
               pip install -r backend/requirements.txt

           - name: Run backend tests
             run: |
               pytest

           - name: Build and push Docker image
             run: |
               docker build -t your-dockerhub-user/omnibunker:latest .
               echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
               docker push your-dockerhub-user/omnibunker:latest

           - name: Deploy to Kubernetes
             run: |
               kubectl apply -f k8s/deployment.yaml
     ```

2. **Automatic Deployment:**

   - Every push to the `main` branch will trigger:
     - Automated testing.
     - Docker image creation and push to DockerHub.
     - Deployment to Kubernetes.

### Troubleshooting

- **Database issues?** Ensure PostgreSQL is running.
- **Frontend errors?** Run `npm install` again.
- **Backend errors?** Check logs with `uvicorn backend.main:app --reload --log-level debug`.
- **OVA import issues?** Ensure that VMware tools are installed and the network adapter is configured properly.
- **CI/CD pipeline issues?** Check the GitHub Actions logs for failed steps.

---

## TÃ¼rkÃ§e Versiyon

### Ã–n KoÅŸullar

Kurulumdan Ã¶nce aÅŸaÄŸÄ±daki baÄŸÄ±mlÄ±lÄ±klarÄ±n yÃ¼klÃ¼ olduÄŸundan emin olun:

- **Docker ve Docker Compose**
- **Python 3.10+ ve Pip**
- **Node.js ve npm**
- **Redis** (Celery iÅŸ sÄ±rasÄ± iÃ§in)
- **PostgreSQL** (VeritabanÄ± yÃ¶netimi iÃ§in)
- **VMware Workstation veya ESXi** (OVA imajÄ± iÃ§in)

### 1. AdÄ±m: Depoyu KlonlayÄ±n

```bash
git clone https://github.com/your-repo/omnibunker.git
cd omnibunker
```

### 2. AdÄ±m: Backend Kurulumu (FastAPI & Celery)

```bash
python3 -m venv env
source env/bin/activate  # Windows: env\Scripts\activate
pip install -r backend/requirements.txt
uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
```

### 3. AdÄ±m: Frontend Kurulumu (React)

```bash
cd frontend
npm install
npm start
```

### 4. AdÄ±m: Redis & Celery Worker Ã‡alÄ±ÅŸtÄ±rma

```bash
redis-server
cd backend
celery -A tasks worker --loglevel=info
```

### 5. AdÄ±m: Docker ile Ã‡alÄ±ÅŸtÄ±rma (Opsiyonel)

```bash
docker-compose up -d
```

### 6. AdÄ±m: VMware OVA Olarak DaÄŸÄ±tÄ±m

1. OmniBunker OVA dosyasÄ±nÄ± indirin.
2. **VMware Workstation** veya **ESXi**'yi aÃ§Ä±n.
3. **Dosya > OVAâ€™yÄ± Ä°Ã§e Aktar** seÃ§eneÄŸini seÃ§in.
4. OmniBunker OVA dosyasÄ±nÄ± seÃ§in.
5. Sanal makineyi baÅŸlatÄ±n.
6. Uygulamaya aÅŸaÄŸÄ±daki adreslerden eriÅŸin:
   - **Frontend:** `http://vm-ip:3000`
   - **Backend API DokÃ¼mantasyonu:** `http://vm-ip:8000/docs`

### 7. AdÄ±m: CI/CD Pipeline YapÄ±landÄ±rma (Opsiyonel)

- **CI/CD sistemi GitHub Actions ile entegre edilmiÅŸtir.**
- **Yeni kod push edildiÄŸinde:**
  - Otomatik testler Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.
  - Docker imajÄ± oluÅŸturulur ve DockerHubâ€™a yÃ¼klenir.
  - Kubernetes Ã¼zerine otomatik deploy edilir.

ğŸš€ **Kurulum tamamlandÄ±! OmniBunker artÄ±k tamamen Ã§alÄ±ÅŸtÄ±rÄ±labilir ve CI/CD pipeline aktif!**

