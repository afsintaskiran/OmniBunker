from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
import jwt
from datetime import datetime, timedelta
from typing import List

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
SECRET_KEY = "supersecretkey"
ALGORITHM = "HS256"

tenants_db = {
    "company_a": {"users": ["admin_a", "user_a"]},
    "company_b": {"users": ["admin_b", "user_b"]}
}

users_db = {
    "admin_a": {"username": "admin_a", "tenant": "company_a", "role": "admin"},
    "user_a": {"username": "user_a", "tenant": "company_a", "role": "user"},
    "admin_b": {"username": "admin_b", "tenant": "company_b", "role": "admin"},
    "user_b": {"username": "user_b", "tenant": "company_b", "role": "user"}
}

# Token olu≈üturma fonksiyonu
def create_access_token(username: str, tenant: str, role: str, expires_delta: timedelta):
    expire = datetime.utcnow() + expires_delta
    to_encode = {"sub": username, "tenant": tenant, "role": role, "exp": expire}
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

@app.get("/tenants")
def get_tenants():
    return tenants_db

@app.get("/users/{tenant}")
def get_users(tenant: str):
    if tenant not in tenants_db:
        raise HTTPException(status_code=404, detail="Tenant not found")
    return tenants_db[tenant]["users"]
